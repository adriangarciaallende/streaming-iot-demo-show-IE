<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.5">
  <POU Name="FB_ModbusMaster_FUSSION" Id="{e226582b-e54d-49b3-a4b9-38aa849bd03d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusMaster_FUSSION
VAR_INPUT
	bEnable			: BOOL;
	entrada_pyads: ARRAY[1..9] OF UINT; // Variables recibidas para escritura en Modbus
END_VAR
VAR
	iPaso			: INT;
	fbReadRegs		: FB_MBReadRegs;
	fbReadInputRegs : FB_MBReadInputRegs;
	bOcupado		: BOOL;
	
	Data_FUSSION : FUSSION;
	bAddrCount		: BYTE:= 1;
	bAddrCount2: BYTE;
	bOcupado2: BOOL;
	counter: BYTE := 1;
	fbWriteRegs: FB_MBWriteRegs;
	bOcupado3: BOOL;
	
END_VAR
VAR_OUTPUT
	salida_pyads_InputRegisters: ARRAY[1..10] OF UINT;
	salida_pyads_HoldingsRegisters: ARRAY[1..9] OF UINT;
END_VAR
VAR_IN_OUT
	flag_entrada_pyads: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iPaso OF
0:	//Inicio
	fbReadRegs(bExecute := FALSE);
	fbReadInputRegs(bExecute := FALSE);
	IF bEnable THEN
		iPaso := 1;
	END_IF

1: //Lectura Input Registers
	fbReadInputRegs(
			sIPAddr		:= Data_FUSSION.IPAddr, 
			nTCPPort	:= Data_FUSSION.TCPPort, 
			nUnitID		:= Data_FUSSION.IDSlave, 
			nQuantity	:= 1, 
			nMBAddr		:= Data_FUSSION.uiAddress_InputRegisters[bAddrCount],
			cbLength	:= SIZEOF(Data_FUSSION.uiRaw_InputRegisters[bAddrCount]),
			pDestAddr	:= ADR(Data_FUSSION.uiRaw_InputRegisters[bAddrCount]), 
			bExecute	:= TRUE, 
			tTimeout	:= T#1S, 
			bBusy		=> bOcupado, 
			bError		=> , 
			nErrId		=> , 
			cbRead		=> );
	IF NOT bOcupado THEN
		fbReadInputRegs(bExecute := FALSE);
		bAddrCount := bAddrCount+1;
		IF bAddrCount > 19 THEN
			bAddrCount := 1;
			bAddrCount2 := 1;
			iPaso := 4;	
		END_IF
	END_IF
	
3: //Lectura Holding Registers
	fbReadRegs(
		sIPAddr		:= Data_FUSSION.IPAddr, 
		nTCPPort	:= Data_FUSSION.TCPPort, 
		nUnitID		:= Data_FUSSION.IDSlave, 
		nQuantity	:= 1,
		nMBAddr		:= Data_FUSSION.uiAddress_HoldingRegisters[bAddrCount2],
		cbLength	:= SIZEOF(Data_FUSSION.uiRaw_HoldingRegisters[bAddrCount2]), 
		pDestAddr	:= ADR(Data_FUSSION.uiRaw_HoldingRegisters[bAddrCount2]), 
		bExecute	:= TRUE, 
		tTimeout	:= T#1S, 
		bBusy		=> bOcupado2, 
		bError		=> , 
		nErrId		=> , 
		cbRead		=> );
	IF NOT bOcupado2 THEN
		fbReadRegs(bExecute := FALSE);
		bAddrCount2 := bAddrCount2+1;
			IF bAddrCount2 > 18 THEN
				bAddrCount2 := 1;
				iPaso := 4;	
			END_IF
	END_IF

4: //Escalado Input Registers
	Data_FUSSION.FSM_State_Outlet1 		:= Data_FUSSION.uiRaw_InputRegisters[1]; // Little
	Data_FUSSION.Power_Outlet1			:= SHL(Data_FUSSION.uiRaw_InputRegisters[3], 8) + Data_FUSSION.uiRaw_InputRegisters[2];
	Data_FUSSION.Energy_Outlet1			:= SHL(Data_FUSSION.uiRaw_InputRegisters[5], 8) + Data_FUSSION.uiRaw_InputRegisters[4];
	Data_FUSSION.FSM_State_Outlet2		:= SHL(Data_FUSSION.uiRaw_InputRegisters[7], 8) + Data_FUSSION.uiRaw_InputRegisters[6];
	Data_FUSSION.Power_Outlet2			:= SHL(Data_FUSSION.uiRaw_InputRegisters[9], 8) + Data_FUSSION.uiRaw_InputRegisters[8];
	Data_FUSSION.Energy_Outlet2			:= SHL(Data_FUSSION.uiRaw_InputRegisters[11], 8) + Data_FUSSION.uiRaw_InputRegisters[10];
	Data_FUSSION.Power_Phase1_Total		:= SHL(Data_FUSSION.uiRaw_InputRegisters[12], 8) + Data_FUSSION.uiRaw_InputRegisters[13]; // Big
	Data_FUSSION.Power_Phase2_Total		:= SHL(Data_FUSSION.uiRaw_InputRegisters[14], 8) + Data_FUSSION.uiRaw_InputRegisters[15];
	Data_FUSSION.Power_Phase3_Total		:= SHL(Data_FUSSION.uiRaw_InputRegisters[16], 8) + Data_FUSSION.uiRaw_InputRegisters[17];
	Data_FUSSION.Number_Available_CPs 	:= SHL(Data_FUSSION.uiRaw_InputRegisters[18], 8) + Data_FUSSION.uiRaw_InputRegisters[19];
	
	//Temporales pyads
	salida_pyads_InputRegisters[1] 		:= Data_FUSSION.uiRaw_InputRegisters[1]; // Little
	salida_pyads_InputRegisters[2]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[3], 8) + Data_FUSSION.uiRaw_InputRegisters[2];
	salida_pyads_InputRegisters[3]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[5], 8) + Data_FUSSION.uiRaw_InputRegisters[4];
	salida_pyads_InputRegisters[4]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[7], 8) + Data_FUSSION.uiRaw_InputRegisters[6];
	salida_pyads_InputRegisters[5]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[9], 8) + Data_FUSSION.uiRaw_InputRegisters[8];
	salida_pyads_InputRegisters[6]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[11], 8) + Data_FUSSION.uiRaw_InputRegisters[10];
	salida_pyads_InputRegisters[7]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[12], 8) + Data_FUSSION.uiRaw_InputRegisters[13]; // Big
	salida_pyads_InputRegisters[8]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[14], 8) + Data_FUSSION.uiRaw_InputRegisters[15];
	salida_pyads_InputRegisters[9]		:= SHL(Data_FUSSION.uiRaw_InputRegisters[16], 8) + Data_FUSSION.uiRaw_InputRegisters[17];
	salida_pyads_InputRegisters[10]	 	:= SHL(Data_FUSSION.uiRaw_InputRegisters[18], 8) + Data_FUSSION.uiRaw_InputRegisters[19];

	iPaso := 6;
	
5: //Escalado Holding Registers
	Data_FUSSION.Power_Phase1_Max_Outlet1	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[2], 8) + Data_FUSSION.uiRaw_HoldingRegisters[1]; // Little
	Data_FUSSION.Power_Phase2_Max_Outlet1	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[4], 8) + Data_FUSSION.uiRaw_HoldingRegisters[3];
	Data_FUSSION.Power_Phase3_Max_Outlet1	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[6], 8) + Data_FUSSION.uiRaw_HoldingRegisters[5];
	Data_FUSSION.Power_Phase1_Max_Outlet2	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[8], 8) + Data_FUSSION.uiRaw_HoldingRegisters[7];
	Data_FUSSION.Power_Phase2_Max_Outlet2	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[10], 8) + Data_FUSSION.uiRaw_HoldingRegisters[9];
	Data_FUSSION.Power_Phase3_Max_Outlet2	:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[12], 8) + Data_FUSSION.uiRaw_HoldingRegisters[11];
	Data_FUSSION.Power_Phase1_Total_Max		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[13], 8) + Data_FUSSION.uiRaw_HoldingRegisters[14]; // Big
	Data_FUSSION.Power_Phase2_Total_Max		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[15], 8) + Data_FUSSION.uiRaw_HoldingRegisters[16];
	Data_FUSSION.Power_Phase3_Total_Max		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[17], 8) + Data_FUSSION.uiRaw_HoldingRegisters[18];
	
	//Temporales pyads
	salida_pyads_HoldingsRegisters[1]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[2], 8) + Data_FUSSION.uiRaw_HoldingRegisters[1]; // Little
	salida_pyads_HoldingsRegisters[2]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[4], 8) + Data_FUSSION.uiRaw_HoldingRegisters[3];
	salida_pyads_HoldingsRegisters[3]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[6], 8) + Data_FUSSION.uiRaw_HoldingRegisters[5];
	salida_pyads_HoldingsRegisters[4]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[8], 8) + Data_FUSSION.uiRaw_HoldingRegisters[7];
	salida_pyads_HoldingsRegisters[5]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[10], 8) + Data_FUSSION.uiRaw_HoldingRegisters[9];
	salida_pyads_HoldingsRegisters[6]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[12], 8) + Data_FUSSION.uiRaw_HoldingRegisters[11];
	salida_pyads_HoldingsRegisters[7]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[13], 8) + Data_FUSSION.uiRaw_HoldingRegisters[14]; // Big
	salida_pyads_HoldingsRegisters[8]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[15], 8) + Data_FUSSION.uiRaw_HoldingRegisters[16];
	salida_pyads_HoldingsRegisters[9]		:= SHL(Data_FUSSION.uiRaw_HoldingRegisters[17], 8) + Data_FUSSION.uiRaw_HoldingRegisters[18];

	iPaso := 6;
	
6: //Envío pyads

	iPaso := 7;
	
7: //Recepción pyads

	iPaso := 8;
	
8: //Escalado Holding Registers para escritura
	IF flag_entrada_pyads = 1 THEN
		Data_FUSSION.uiRaw_HoldingRegisters_write[1]	:= UDINT_TO_UINT(entrada_pyads[1]); // Little
		Data_FUSSION.uiRaw_HoldingRegisters_write[2]	:= UDINT_TO_UINT(SHR(entrada_pyads[1], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[3]	:= UDINT_TO_UINT(entrada_pyads[2]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[4]	:= UDINT_TO_UINT(SHR(entrada_pyads[2], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[5]	:= UDINT_TO_UINT(entrada_pyads[3]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[6]	:= UDINT_TO_UINT(SHR(entrada_pyads[3], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[7]	:= UDINT_TO_UINT(entrada_pyads[4]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[8]	:= UDINT_TO_UINT(SHR(entrada_pyads[4], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[9]	:= UDINT_TO_UINT(entrada_pyads[5]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[10]	:= UDINT_TO_UINT(SHR(entrada_pyads[5], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[11]	:= UDINT_TO_UINT(entrada_pyads[6]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[12]	:= UDINT_TO_UINT(SHR(entrada_pyads[6], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[13]	:= UDINT_TO_UINT(SHR(entrada_pyads[7], 8)); // Big
		Data_FUSSION.uiRaw_HoldingRegisters_write[14]	:= UDINT_TO_UINT(entrada_pyads[7]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[15]	:= UDINT_TO_UINT(SHR(entrada_pyads[8], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[16]	:= UDINT_TO_UINT(entrada_pyads[8]);
		Data_FUSSION.uiRaw_HoldingRegisters_write[17]	:= UDINT_TO_UINT(SHR(entrada_pyads[9], 8));
		Data_FUSSION.uiRaw_HoldingRegisters_write[18]	:= UDINT_TO_UINT(entrada_pyads[9]);	
	
		IF counter <= 18 THEN
			//IF NOT (Data_FUSSION.uiRaw_HoldingRegisters_write[counter] = Data_FUSSION.uiRaw_HoldingRegisters[counter]) THEN
				fbWriteRegs(
					sIPAddr		:= Data_FUSSION.IPAddr, 
					nTCPPort	:= Data_FUSSION.TCPPort, 
					nUnitID		:= Data_FUSSION.IDSlave, 
					nQuantity	:= 1,
					nMBAddr		:= Data_FUSSION.uiAddress_HoldingRegisters[counter],
					cbLength	:= SIZEOF(Data_FUSSION.uiRaw_HoldingRegisters_write[counter]),  
					pSrcAddr	:= ADR(Data_FUSSION.uiRaw_HoldingRegisters_write[counter]), 
					bExecute	:= TRUE, 
					tTimeout	:= T#1S, 
					bBusy		=> bOcupado3, 
					bError		=> , 
					nErrId		=> );
				IF NOT bOcupado3 THEN
					fbWriteRegs(bExecute := FALSE);
					counter := counter+1;
					IF counter >= 18 THEN
						counter := 1;
						flag_entrada_pyads:= 0;
						iPaso := 0;	
					END_IF
				END_IF
			//END_IF
		END_IF	
	
	ELSE
		iPaso:= 0;
	END_IF
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_ModbusMaster_FUSSION">
      <LineId Id="644" Count="2" />
      <LineId Id="765" Count="0" />
      <LineId Id="647" Count="4" />
      <LineId Id="739" Count="0" />
      <LineId Id="752" Count="11" />
      <LineId Id="738" Count="0" />
      <LineId Id="666" Count="4" />
      <LineId Id="734" Count="0" />
      <LineId Id="671" Count="38" />
      <LineId Id="885" Count="0" />
      <LineId Id="908" Count="0" />
      <LineId Id="888" Count="8" />
      <LineId Id="887" Count="0" />
      <LineId Id="710" Count="9" />
      <LineId Id="767" Count="2" />
      <LineId Id="897" Count="0" />
      <LineId Id="909" Count="0" />
      <LineId Id="899" Count="7" />
      <LineId Id="898" Count="0" />
      <LineId Id="720" Count="1" />
      <LineId Id="795" Count="1" />
      <LineId Id="798" Count="0" />
      <LineId Id="797" Count="0" />
      <LineId Id="791" Count="1" />
      <LineId Id="794" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="770" Count="1" />
      <LineId Id="935" Count="0" />
      <LineId Id="773" Count="5" />
      <LineId Id="780" Count="4" />
      <LineId Id="779" Count="0" />
      <LineId Id="785" Count="5" />
      <LineId Id="911" Count="0" />
      <LineId Id="936" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="837" Count="4" />
      <LineId Id="816" Count="0" />
      <LineId Id="818" Count="4" />
      <LineId Id="808" Count="0" />
      <LineId Id="945" Count="1" />
      <LineId Id="949" Count="2" />
      <LineId Id="953" Count="0" />
      <LineId Id="959" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="947" Count="0" />
      <LineId Id="961" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="937" Count="0" />
      <LineId Id="956" Count="1" />
      <LineId Id="955" Count="0" />
      <LineId Id="494" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>